name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-xdist black isort flake8

    - name: Run pre-commit checks
      run: |
        # Code formatting with Black
        black --check --diff backend/
        
        # Import sorting with isort  
        isort --check-only --diff backend/
        
        # Linting with flake8
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        cd backend
        python -m pytest tests/ -v --cov=models --cov=services --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend type check
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend linting (if configured)
      run: |
        cd frontend
        npm run lint || echo "No lint script configured"

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Install frontend dependencies  
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        python app.py &
        sleep 10  # Wait for server to start
    
    - name: Test backend health endpoint
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
